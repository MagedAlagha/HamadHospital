<!-- التصميم القديم (الجدول) -->
    <!-- <div class="row d-flex justify-content-center">
      <ng-container *ngIf="Prosthetics$ | async "></ng-container>
      <ng-container *ngIf="ProstheticsTypes$ | async as data">
        <div class="col-md-9 mb-5" *ngFor="let item of data">
          <div class="tabel">
            <div
              class="header-tabel d-flex justify-content-center align-items-baseline text-center"

            >
              <h5 class="ps-1">
                {{ item.NameAr }}
              </h5>
            </div>
            <div class="row text-center"  *ngFor="let child of item?.children">
              <div class="col-6 pt-3">
                <div class="body-title">{{child.NameAr}}</div>

                <div class="body-box " *ngFor="let child2 of child?.children">{{child2.NameAr}}</div>

              </div>
              <div class="col-6 pt-3" >
               <div class="body-title">العمر</div>
                 <div class="body-box" *ngFor="let child2 of child?.children">{{child2.AgeAr}}</div>

              </div>
            </div>
          </div>
        </div>
      </ng-container>
      <br />

    </div> -->


-----------------------------------------------


isEn = document.dir == 'ltr' ? true : false;
  Services$!: Observable<any>;
  ProstheticsTypes$!: Observable<any>;
  Prosthetics$!: Observable<any>;
  prosthetics: any[] = [];
  constructor(
    private _homeService: HomeService,
    private _prostheticsService: ProstheticsService
  ) {}

  ngOnInit(): void {

    this.Services$ = this._homeService.Selector$('Services');
    this._prostheticsService.getProstheticsTypes();
    this._prostheticsService.getProsthetics();
    this.Prosthetics$ = this._prostheticsService.Selector$('prosthetics').pipe(
      map((val: any) => {
        return val?.filter((item: any) => {
          return item.IsActive;
        });
      }),
      filter((val:any)=>val.length),
      map((val: any) => {
        return (
          val.map((res: any) => {
            return {
              ...res,
              ID: 0,
              ParentID: res.ProstheticsTypeID,
            };
          })

        );
      }),
      switchMap((prosthetic: any) => {
        return (this.ProstheticsTypes$ = this._prostheticsService
          .Selector$('prostheticsTypes')
          .pipe(
            map((val: any) => {
              return val?.filter((item: any) => {
                return item.IsActive;
              });
            }),
            map((prostheticsType: any) => {
              return this.convertToTree(prostheticsType.concat(prosthetic));
            }),


          ));
      })
    );
  }





  convertToTree(list: any[]) {
    // });
    var map = [],
      node,
      roots = [],
      i;
    for (i = 0; i < list.length; i += 1) {
      map[list[i]['ID']] = i; // initialize the map
      list[i].key = list[i]['ID'];
      list[i].children = []; // initialize the children
    }
    for (i = 0; i < list.length; i += 1) {
      node = list[i];
      if (
        ((node['ParentID'] && node['ParentID'] != '0') ||
          node['ParentID'] == 0) &&
        node['ParentID'] !== '#'
      ) {
        // if you have dangling branches check that map[node.parentId] exists
        list[map[node['ParentID']]]?.children.push(node);
      } else {
        roots.push(node);
      }
    }

    return roots;
  }
